###############################################################################
#                                                                             #
#                                                       08/Jun/2010  12:29:40 #
# IAR C/C++ Compiler V5.40.0.20237/W32, Evaluation Version  for Atmel AVR     #
# Copyright (C) 1996-2009 IAR Systems AB.                                     #
#                                                                             #
#    Source file  =  D:\works\projects\Blink LED mega8\RS232.c                #
#    Command line =  "D:\works\projects\Blink LED mega8\RS232.c" --cpu=m8     #
#                    -ms -o "D:\works\projects\Blink LED mega8\Debug\Obj\"    #
#                    -lCN "D:\works\projects\Blink LED mega8\Debug\List\"     #
#                    --initializers_in_flash -z3 --no_cse --no_inline         #
#                    --no_code_motion --no_cross_call --no_clustering         #
#                    --no_tbaa --debug -DENABLE_BIT_DEFINITIONS -e -I         #
#                    "C:\Program Files\IAR Systems\Embedded Workbench         #
#                    Evaluation 5.4\avr\INC\" -I "C:\Program Files\IAR        #
#                    Systems\Embedded Workbench Evaluation                    #
#                    5.4\avr\INC\DLIB\" --eeprom_size 512 --dlib_config       #
#                    "C:\Program Files\IAR Systems\Embedded Workbench         #
#                    Evaluation 5.4\avr\LIB\DLIB\dlAVR-1s-ec_mul-n.h"         #
#    List file    =  D:\works\projects\Blink LED mega8\Debug\List\RS232.lst   #
#    Object file  =  D:\works\projects\Blink LED mega8\Debug\Obj\RS232.r90    #
#                                                                             #
#                                                                             #
###############################################################################

D:\works\projects\Blink LED mega8\RS232.c
      1          #include	<stdint.h>
      2          #include	"Hardware.h"

   \                                 In  segment ABSOLUTE, at 0x2a
   \   <__C25> volatile __io _A_UCSRB
   \                     _A_UCSRB:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x2c
   \   <__C29> volatile __io _A_UDR
   \                     _A_UDR:
   \   00000000                      DS8 1
      3          
      4          #define	UART_RX_BBUFF_SIZE	16	//; must be power of 2
      5          #define	UART_TX_BBUFF_SIZE	8	//; must be power of 2
      6          

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
      7          static char RxBuffer[UART_RX_BBUFF_SIZE];
   \                     RxBuffer:
   \   00000000                      DS8 16

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
      8          static volatile uint8_t RxHead, RxTail;
   \                     RxHead:
   \   00000000                      DS8 1

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \                     RxTail:
   \   00000000                      DS8 1
      9          
     10          #pragma vector = USART_RXC_vect

   \                                 In  segment CODE, align 2, keep-with-next
     11          __interrupt void  Rx232Handler(void) {
   \                     Rx232Handler:
   \   00000000   93AA               ST      -Y, R26
   \   00000002   939A               ST      -Y, R25
   \   00000004   938A               ST      -Y, R24
   \   00000006   93FA               ST      -Y, R31
   \   00000008   93EA               ST      -Y, R30
   \   0000000A   923A               ST      -Y, R3
   \   0000000C   922A               ST      -Y, R2
   \   0000000E   921A               ST      -Y, R1
   \   00000010   920A               ST      -Y, R0
   \   00000012   937A               ST      -Y, R23
   \   00000014   936A               ST      -Y, R22
   \   00000016   935A               ST      -Y, R21
   \   00000018   934A               ST      -Y, R20
   \   0000001A   933A               ST      -Y, R19
   \   0000001C   932A               ST      -Y, R18
   \   0000001E   931A               ST      -Y, R17
   \   00000020   930A               ST      -Y, R16
   \   00000022   B7AF               IN      R26, 0x3F
     12          	char RxData = UDR;
   \   00000024   B19C               IN      R25, 0x0C
     13          	uint8_t Tmp = RxHead;
   \   00000026   9180....           LDS     R24, RxHead
     14          	if((uint8_t)(Tmp - RxTail) <  (uint8_t) UART_RX_BBUFF_SIZE) {
   \   0000002A   9110....           LDS     R17, RxTail
   \   0000002E   2F08               MOV     R16, R24
   \   00000030   1B01               SUB     R16, R17
   \   00000032   3100               CPI     R16, 16
   \   00000034   F458               BRCC    ??Rx232Handler_0
     15          		RxBuffer[ Tmp++ % UART_RX_BBUFF_SIZE ] = RxData;
   \   00000036   E140               LDI     R20, 16
   \   00000038   2F08               MOV     R16, R24
   \   0000003A   ....               RCALL   ?UC_DIVMOD_L01
   \   0000003C   E050               LDI     R21, 0
   \   0000003E   01FA               MOVW    R31:R30, R21:R20
   \   00000040   ....               SUBI    R30, LOW((-(RxBuffer) & 0xFFFF))
   \   00000042   ....               SBCI    R31, (-(RxBuffer) & 0xFFFF) >> 8
   \   00000044   8390               ST      Z, R25
   \   00000046   9583               INC     R24
     16          		RxHead = Tmp;
   \   00000048   9380....           STS     RxHead, R24
     17          	}
     18          }
   \                     ??Rx232Handler_0:
   \   0000004C   BFAF               OUT     0x3F, R26
   \   0000004E   9109               LD      R16, Y+
   \   00000050   9119               LD      R17, Y+
   \   00000052   9129               LD      R18, Y+
   \   00000054   9139               LD      R19, Y+
   \   00000056   9149               LD      R20, Y+
   \   00000058   9159               LD      R21, Y+
   \   0000005A   9169               LD      R22, Y+
   \   0000005C   9179               LD      R23, Y+
   \   0000005E   9009               LD      R0, Y+
   \   00000060   9019               LD      R1, Y+
   \   00000062   9029               LD      R2, Y+
   \   00000064   9039               LD      R3, Y+
   \   00000066   91E9               LD      R30, Y+
   \   00000068   91F9               LD      R31, Y+
   \   0000006A   9189               LD      R24, Y+
   \   0000006C   9199               LD      R25, Y+
   \   0000006E   91A9               LD      R26, Y+
   \   00000070   9518               RETI
   \   00000072                      REQUIRE _A_UDR
     19          

   \                                 In  segment CODE, align 2, keep-with-next
     20          char getchar (void) {
   \                     getchar:
   \   00000000   938A               ST      -Y, R24
     21          	uint8_t Tmp = RxTail;
   \   00000002   9180....           LDS     R24, RxTail
     22          	char RxData;
     23          	while (Tmp == RxHead)
   \                     ??getchar_0:
   \   00000006   9100....           LDS     R16, RxHead
   \   0000000A   1780               CP      R24, R16
   \   0000000C   F3E1               BREQ    ??getchar_0
     24          		;
     25          	RxData = RxBuffer[ Tmp++ % UART_RX_BBUFF_SIZE ];
   \   0000000E   E140               LDI     R20, 16
   \   00000010   2F08               MOV     R16, R24
   \   00000012   ....               RCALL   ?UC_DIVMOD_L01
   \   00000014   E050               LDI     R21, 0
   \   00000016   01FA               MOVW    R31:R30, R21:R20
   \   00000018   ....               SUBI    R30, LOW((-(RxBuffer) & 0xFFFF))
   \   0000001A   ....               SBCI    R31, (-(RxBuffer) & 0xFFFF) >> 8
   \   0000001C   8100               LD      R16, Z
   \   0000001E   9583               INC     R24
     26          	RxTail = Tmp;
   \   00000020   9380....           STS     RxTail, R24
     27          	return(RxData);
   \   00000024   9189               LD      R24, Y+
   \   00000026   9508               RET
     28          }
     29          

   \                                 In  segment CODE, align 2, keep-with-next
     30          unsigned char hasinput (void) {
   \                     hasinput:
     31          	uint8_t Tmp = RxHead;
   \   00000000   9100....           LDS     R16, RxHead
     32          	return (Tmp - RxTail);
   \   00000004   9110....           LDS     R17, RxTail
   \   00000008   1B01               SUB     R16, R17
   \   0000000A   9508               RET
     33          }
     34          

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
     35          static char TxBuffer[UART_TX_BBUFF_SIZE];
   \                     TxBuffer:
   \   00000000                      DS8 8

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
     36          static volatile uint8_t TxHead, TxTail;
   \                     TxHead:
   \   00000000                      DS8 1

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \                     TxTail:
   \   00000000                      DS8 1
     37          
     38          #pragma vector = USART_UDRE_vect

   \                                 In  segment CODE, align 2, keep-with-next
     39          __interrupt void  Tx232Handler(void) {
   \                     Tx232Handler:
   \   00000000   939A               ST      -Y, R25
   \   00000002   938A               ST      -Y, R24
   \   00000004   93FA               ST      -Y, R31
   \   00000006   93EA               ST      -Y, R30
   \   00000008   923A               ST      -Y, R3
   \   0000000A   922A               ST      -Y, R2
   \   0000000C   921A               ST      -Y, R1
   \   0000000E   920A               ST      -Y, R0
   \   00000010   937A               ST      -Y, R23
   \   00000012   936A               ST      -Y, R22
   \   00000014   935A               ST      -Y, R21
   \   00000016   934A               ST      -Y, R20
   \   00000018   933A               ST      -Y, R19
   \   0000001A   932A               ST      -Y, R18
   \   0000001C   931A               ST      -Y, R17
   \   0000001E   930A               ST      -Y, R16
   \   00000020   B79F               IN      R25, 0x3F
     40          	uint8_t Tmp = TxTail;
   \   00000022   9180....           LDS     R24, TxTail
     41          	UDR = TxBuffer[ Tmp++ % UART_TX_BBUFF_SIZE ];
   \   00000026   E048               LDI     R20, 8
   \   00000028   2F08               MOV     R16, R24
   \   0000002A   ....               RCALL   ?UC_DIVMOD_L01
   \   0000002C   E050               LDI     R21, 0
   \   0000002E   01FA               MOVW    R31:R30, R21:R20
   \   00000030   ....               SUBI    R30, LOW((-(TxBuffer) & 0xFFFF))
   \   00000032   ....               SBCI    R31, (-(TxBuffer) & 0xFFFF) >> 8
   \   00000034   8100               LD      R16, Z
   \   00000036   B90C               OUT     0x0C, R16
   \   00000038   9583               INC     R24
     42          	TxTail = Tmp;
   \   0000003A   9380....           STS     TxTail, R24
     43          	if(Tmp == TxHead) {
   \   0000003E   9100....           LDS     R16, TxHead
   \   00000042   1780               CP      R24, R16
   \   00000044   F409               BRNE    ??Tx232Handler_0
     44          		UCSRB &= ~(1<<UDRIE);
   \   00000046   9855               CBI     0x0A, 0x05
     45          	}
     46          }
   \                     ??Tx232Handler_0:
   \   00000048   BF9F               OUT     0x3F, R25
   \   0000004A   9109               LD      R16, Y+
   \   0000004C   9119               LD      R17, Y+
   \   0000004E   9129               LD      R18, Y+
   \   00000050   9139               LD      R19, Y+
   \   00000052   9149               LD      R20, Y+
   \   00000054   9159               LD      R21, Y+
   \   00000056   9169               LD      R22, Y+
   \   00000058   9179               LD      R23, Y+
   \   0000005A   9009               LD      R0, Y+
   \   0000005C   9019               LD      R1, Y+
   \   0000005E   9029               LD      R2, Y+
   \   00000060   9039               LD      R3, Y+
   \   00000062   91E9               LD      R30, Y+
   \   00000064   91F9               LD      R31, Y+
   \   00000066   9189               LD      R24, Y+
   \   00000068   9199               LD      R25, Y+
   \   0000006A   9518               RETI
   \   0000006C                      REQUIRE _A_UCSRB
   \   0000006C                      REQUIRE _A_UDR
     47          

   \                                 In  segment CODE, align 2, keep-with-next
     48          void putchar (char Byte) {
   \                     putchar:
   \   00000000   ....               RCALL   ?PROLOGUE2_L09
   \   00000002   2F90               MOV     R25, R16
     49          	uint8_t Tmp = TxHead;
   \   00000004   9180....           LDS     R24, TxHead
     50          	while((uint8_t)(Tmp - TxTail) >=  (uint8_t) UART_TX_BBUFF_SIZE);	// Buffer full
   \                     ??putchar_0:
   \   00000008   9110....           LDS     R17, TxTail
   \   0000000C   2F08               MOV     R16, R24
   \   0000000E   1B01               SUB     R16, R17
   \   00000010   3008               CPI     R16, 8
   \   00000012   F7D0               BRCC    ??putchar_0
     51          	TxBuffer[ Tmp++ % UART_TX_BBUFF_SIZE ] = Byte;
   \   00000014   E048               LDI     R20, 8
   \   00000016   2F08               MOV     R16, R24
   \   00000018   ....               RCALL   ?UC_DIVMOD_L01
   \   0000001A   E050               LDI     R21, 0
   \   0000001C   01FA               MOVW    R31:R30, R21:R20
   \   0000001E   ....               SUBI    R30, LOW((-(TxBuffer) & 0xFFFF))
   \   00000020   ....               SBCI    R31, (-(TxBuffer) & 0xFFFF) >> 8
   \   00000022   8390               ST      Z, R25
   \   00000024   9583               INC     R24
     52          	TxHead = Tmp;
   \   00000026   9380....           STS     TxHead, R24
     53          	UCSRB |= (1<<UDRIE);
   \   0000002A   9A55               SBI     0x0A, 0x05
     54          }
   \   0000002C   E0E2               LDI     R30, 2
   \   0000002E   ....               RJMP    ?EPILOGUE_B2_L09
   \   00000030                      REQUIRE _A_UCSRB
     55          

   \                                 In  segment CODE, align 2, keep-with-next
     56          void puts_P (const char __flash * string) {
   \                     puts_P:
   \   00000000   ....               RCALL   ?PROLOGUE2_L09
   \   00000002   01C8               MOVW    R25:R24, R17:R16
   \   00000004   C001               RJMP    ??puts_P_0
     57          	char c;
     58          	while(c = *string++) {
     59          		putchar(c);
   \                     ??puts_P_1:
   \   00000006   ....               RCALL   putchar
     60          	}
   \                     ??puts_P_0:
   \   00000008   01FC               MOVW    R31:R30, R25:R24
   \   0000000A   9114               LPM     R17, Z
   \   0000000C   9601               ADIW    R25:R24, 1
   \   0000000E   2F01               MOV     R16, R17
   \   00000010   2311               TST     R17
   \   00000012   F7C9               BRNE    ??puts_P_1
     61          }
   \   00000014   E0E2               LDI     R30, 2
   \   00000016   ....               RJMP    ?EPILOGUE_B2_L09
     62          

   \                                 In  segment CODE, align 2, keep-with-next
     63          void puts (const char * string) {
   \                     puts:
   \   00000000   ....               RCALL   ?PROLOGUE4_L09
   \   00000002   01D8               MOVW    R27:R26, R17:R16
   \   00000004   C001               RJMP    ??puts_0
     64          	char c;
     65          	while(c = *string++) {
     66          		putchar(c);
   \                     ??puts_1:
   \   00000006   ....               RCALL   putchar
     67          	}
   \                     ??puts_0:
   \   00000008   911C               LD      R17, X
   \   0000000A   9611               ADIW    R27:R26, 1
   \   0000000C   2F01               MOV     R16, R17
   \   0000000E   2311               TST     R17
   \   00000010   F7D1               BRNE    ??puts_1
     68          }
   \   00000012   E0E4               LDI     R30, 4
   \   00000014   ....               RJMP    ?EPILOGUE_B4_L09

   \                                 In  segment INTVEC, offset 0x16, root
   \                     `??Rx232Handler??INTVEC 22`:
   \   00000016   ....               RJMP    Rx232Handler

   \                                 In  segment INTVEC, offset 0x18, root
   \                     `??Tx232Handler??INTVEC 24`:
   \   00000018   ....               RJMP    Tx232Handler

   Maximum stack usage in bytes:

     Function     CSTACK RSTACK
     --------     ------ ------
     Rx232Handler    17      4
     Tx232Handler    16      4
     getchar          1      4
     hasinput         0      2
     putchar          2      4
     puts             4      2
       -> putchar     4      2
     puts_P           2      2
       -> putchar     2      2


   Segment part sizes:

     Function/Label            Bytes
     --------------            -----
     _A_UCSRB                     1
     _A_UDR                       1
     RxBuffer                    16
     RxHead                       1
     RxTail                       1
     Rx232Handler               114
     getchar                     40
     hasinput                    12
     TxBuffer                     8
     TxHead                       1
     TxTail                       1
     Tx232Handler               108
     putchar                     48
     puts_P                      24
     puts                        22
     ??Rx232Handler??INTVEC 22    2
     ??Tx232Handler??INTVEC 24    2
      Others                      6

 
   2 bytes in segment ABSOLUTE
 368 bytes in segment CODE
   6 bytes in segment INITTAB
   4 bytes in segment INTVEC
  28 bytes in segment NEAR_Z
 
 368 bytes of CODE memory (+ 10 bytes shared)
  28 bytes of DATA memory (+  2 bytes shared)

Errors: none
Warnings: none
