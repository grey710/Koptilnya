;//***************************************************************************
;//
;//  Author(s)...: Pashgan    http://ChipEnable.Ru
;//
;//  Target(s)...: ATMega8535
;//
;//  Compiler....: CodeVision 2.04
;//
;//  Description.: USART/UART. Используем кольцевой буфер
;//
;//  Data........: 3.01.10
;//
;//***************************************************************************
;#include "usart.h"
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;//передающий буфер
;unsigned char usartTxBuf[SIZE_BUF];
;unsigned char txBufTail = 0;
;unsigned char txBufHead = 0;
;unsigned char txCount = 0;
;
;//приемный буфер
;unsigned char usartRxBuf[SIZE_BUF];
;unsigned char rxBufTail = 0;
;unsigned char rxBufHead = 0;
;unsigned char rxCount = 0;
;
;//инициализация usart`a
;void USART_Init(void)
; 0001 001E {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0001 001F   UBRRH = 0;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0001 0020   UBRRL = 51; //скорость обмена 9600 бод
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0001 0021   UCSRB = (1<<RXCIE)|(1<<TXCIE)|(1<<RXEN)|(1<<TXEN); //разр. прерыв при приеме и передачи, разр приема, разр передачи.
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0001 0022   UCSRC = (1<<URSEL)|(1<<UCSZ1)|(1<<UCSZ0); //размер слова 8 разрядов
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0001 0023 }
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;
;//______________________________________________________________________________
;//возвращает колличество символов передающего буфера
;unsigned char USART_GetTxCount(void)
; 0001 0028 {
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0001 0029   return txCount;
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0001 002A }
;PCODE: $0000001D VOL: 0
;
;//"очищает" передающий буфер
;void USART_FlushTxBuf(void)
; 0001 002E {
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 0001 002F   txBufTail = 0;
;PCODE: $00000020 VOL: 0
; 0001 0030   txCount = 0;
;PCODE: $00000021 VOL: 0
; 0001 0031   txBufHead = 0;
;PCODE: $00000022 VOL: 0
; 0001 0032 }
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;
;//помещает символ в буфер, инициирует начало передачи
;void USART_PutChar(unsigned char sym)
; 0001 0036 {
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0001 0037   //если модуль usart свободен и это первый символ
; 0001 0038   //пишем его прямо в регистр UDR
; 0001 0039   if(((UCSRA & (1<<UDRE)) != 0) && (txCount == 0)) UDR = sym;
;	sym -> Y+0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
; 0001 003A   else {
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
; 0001 003B     if (txCount < SIZE_BUF){    //если в буфере еще есть место
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0001 003C       usartTxBuf[txBufTail] = sym; //помещаем в него символ
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0001 003D       txCount++;                   //инкрементируем счетчик символов
;PCODE: $0000003D VOL: 0
; 0001 003E       txBufTail++;                 //и индекс хвоста буфера
;PCODE: $0000003E VOL: 0
; 0001 003F       if (txBufTail == SIZE_BUF) txBufTail = 0;
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0001 0040     }
;PCODE: $00000043 VOL: 0
; 0001 0041   }
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0001 0042 }
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;
;//функция посылающая строку по usart`у
;void USART_SendStr(unsigned char * data)
; 0001 0046 {
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
; 0001 0047   unsigned char sym;
; 0001 0048   while(*data){
;PCODE: $0000004B VOL: 0
;	*data -> Y+1
;	sym -> R17
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
; 0001 0049     sym = *data++;
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
; 0001 004A     USART_PutChar(sym);
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0001 004B   }
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
; 0001 004C }
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;
;//обработчик прерывания по завершению передачи
;interrupt [USART_TXC] void usart_txc_my(void)
; 0001 0050 {
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
; 0001 0051   if (txCount > 0){              //если буфер не пустой
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
; 0001 0052     UDR = usartTxBuf[txBufHead]; //записываем в UDR символ из буфера
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0001 0053     txCount--;                   //уменьшаем счетчик символов
;PCODE: $00000067 VOL: 0
; 0001 0054     txBufHead++;                 //инкрементируем индекс головы буфера
;PCODE: $00000068 VOL: 0
; 0001 0055     if (txBufHead == SIZE_BUF) txBufHead = 0;
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
; 0001 0056   }
;PCODE: $0000006D VOL: 0
; 0001 0057 }
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;
;//______________________________________________________________________________
;//возвращает колличество символов находящихся в приемном буфере
;unsigned char USART_GetRxCount(void)
; 0001 005C {
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
; 0001 005D   return rxCount;
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
; 0001 005E }
;PCODE: $00000076 VOL: 0
;
;//"очищает" приемный буфер
;void USART_FlushRxBuf(void)
; 0001 0062 {
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
; 0001 0063   unsigned char saveSreg = SREG;
; 0001 0064   #asm("cli");
;PCODE: $00000079 VOL: 0
;	saveSreg -> R17
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
	cli
;PCODE: $0000007D VOL: 0
; 0001 0065   rxBufTail = 0;
;PCODE: $0000007E VOL: 0
; 0001 0066   rxBufHead = 0;
;PCODE: $0000007F VOL: 0
; 0001 0067   rxCount = 0;
;PCODE: $00000080 VOL: 0
; 0001 0068   SREG = saveSreg;
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
; 0001 0069 }
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;
;//чтение буфера
;unsigned char USART_GetChar(void)
; 0001 006D {
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
; 0001 006E   unsigned char sym;
; 0001 006F   if (rxCount > 0){                     //если приемный буфер не пустой
;PCODE: $00000088 VOL: 0
;	sym -> R17
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
; 0001 0070     sym = usartRxBuf[rxBufHead];        //прочитать из него символ
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
; 0001 0071     rxCount--;                          //уменьшить счетчик символов
;PCODE: $00000090 VOL: 0
; 0001 0072     rxBufHead++;                        //инкрементировать индекс головы буфера
;PCODE: $00000091 VOL: 0
; 0001 0073     if (rxBufHead == SIZE_BUF) rxBufHead = 0;
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
; 0001 0074     return sym;                         //вернуть прочитанный символ
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
; 0001 0075   }
; 0001 0076   return 0;
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
; 0001 0077 }
;PCODE: $0000009E VOL: 0
;
;
;//прерывание по завершению приема
;interrupt [USART_RXC] void usart_rxc_my(void)
; 0001 007C {
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
; 0001 007D   if (rxCount < SIZE_BUF){                //если в буфере еще есть место
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
; 0001 007E       usartRxBuf[rxBufTail] = UDR;        //считать символ из UDR в буфер
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
; 0001 007F       rxBufTail++;                             //увеличить индекс хвоста приемного буфера
;PCODE: $000000A9 VOL: 0
; 0001 0080       if (rxBufTail == SIZE_BUF) rxBufTail = 0;
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
; 0001 0081       rxCount++;                                 //увеличить счетчик принятых символов
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
; 0001 0082     }
; 0001 0083 }
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;
