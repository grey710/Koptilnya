
AVRASM ver. 2.1.30  D:\сайт1\сайт1\заготовки\uart-2\prog\USART2-CodeVision\USART2\usart.asm Fri Jan 08 02:25:29 2010

D:\сайт1\сайт1\заготовки\uart-2\prog\USART2-CodeVision\USART2\usart.asm(1051): warning: Register r5 already defined by the .DEF directive
D:\сайт1\сайт1\заготовки\uart-2\prog\USART2-CodeVision\USART2\usart.asm(1052): warning: Register r4 already defined by the .DEF directive
D:\сайт1\сайт1\заготовки\uart-2\prog\USART2-CodeVision\USART2\usart.asm(1053): warning: Register r7 already defined by the .DEF directive
D:\сайт1\сайт1\заготовки\uart-2\prog\USART2-CodeVision\USART2\usart.asm(1054): warning: Register r6 already defined by the .DEF directive
D:\сайт1\сайт1\заготовки\uart-2\prog\USART2-CodeVision\USART2\usart.asm(1055): warning: Register r9 already defined by the .DEF directive
D:\сайт1\сайт1\заготовки\uart-2\prog\USART2-CodeVision\USART2\usart.asm(1056): warning: Register r8 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V2.04.4a Evaluation
                 ;(C) Copyright 1998-2009 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Chip type                : ATmega8535
                 ;Program type             : Application
                 ;Clock frequency          : 8,000000 MHz
                 ;Memory model             : Small
                 ;Optimize for             : Size
                 ;(s)printf features       : int, width
                 ;(s)scanf features        : int, width
                 ;External RAM size        : 0
                 ;Data Stack size          : 128 byte(s)
                 ;Heap size                : 0 byte(s)
                 ;Promote 'char' to 'int'  : No
                 ;'char' is unsigned       : Yes
                 ;8 bit enums              : Yes
                 ;global 'const' stored in FLASH: No
                 ;Enhanced core instructions    : On
                 ;Smart register allocation     : On
                 ;Automatic register allocation : On
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega8535
                 	#pragma AVRPART MEMORY PROG_FLASH 8192
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 512
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	RCALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMRDW
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X+
                 	LD   R22,X
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _txBufTail=R5
                 	.DEF _txBufHead=R4
                 	.DEF _txCount=R7
                 	.DEF _rxBufTail=R6
                 	.DEF _rxBufHead=R9
                 	.DEF _rxCount=R8
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;INTERRUPT VECTORS
000000 c024      	RJMP __RESET
000001 cffe      	RJMP 0x00
000002 cffd      	RJMP 0x00
000003 cffc      	RJMP 0x00
000004 cffb      	RJMP 0x00
000005 cffa      	RJMP 0x00
000006 cff9      	RJMP 0x00
000007 cff8      	RJMP 0x00
000008 cff7      	RJMP 0x00
000009 cff6      	RJMP 0x00
00000a cff5      	RJMP 0x00
00000b c0af      	RJMP _usart_rxc_my
00000c cff3      	RJMP 0x00
00000d c083      	RJMP _usart_txc_my
00000e cff1      	RJMP 0x00
00000f cff0      	RJMP 0x00
000010 cfef      	RJMP 0x00
000011 cfee      	RJMP 0x00
000012 cfed      	RJMP 0x00
000013 cfec      	RJMP 0x00
000014 cfeb      	RJMP 0x00
                 
                 _0x0:
000015 7420
000016 7365
000017 2074
000018 202d      	.DB  0x20,0x74,0x65,0x73,0x74,0x20,0x2D,0x20
000019 4b4f
00001a 0020      	.DB  0x4F,0x4B,0x20,0x0
                 _0x20012:
00001b 0000
00001c 0000
00001d 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0
                 
                 __GLOBAL_INI_TBL:
00001e 000c      	.DW  0x0C
00001f 00e0      	.DW  _0x7
000020 002a      	.DW  _0x0*2
                 
000021 0006      	.DW  0x06
000022 0004      	.DW  0x04
000023 0036      	.DW  _0x20012*2
                 
                 _0xFFFFFFFF:
000024 0000      	.DW  0
                 
                 __RESET:
000025 94f8      	CLI
000026 27ee      	CLR  R30
000027 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000028 e0f1      	LDI  R31,1
000029 bffb      	OUT  GICR,R31
00002a bfeb      	OUT  GICR,R30
00002b bfe5      	OUT  MCUCR,R30
                 
                 ;DISABLE WATCHDOG
00002c e1f8      	LDI  R31,0x18
00002d bdf1      	OUT  WDTCR,R31
00002e bde1      	OUT  WDTCR,R30
                 
                 ;CLEAR R2-R14
00002f e08d      	LDI  R24,(14-2)+1
000030 e0a2      	LDI  R26,2
000031 27bb      	CLR  R27
                 __CLEAR_REG:
000032 93ed      	ST   X+,R30
000033 958a      	DEC  R24
000034 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000035 e080      	LDI  R24,LOW(0x200)
000036 e092      	LDI  R25,HIGH(0x200)
000037 e6a0      	LDI  R26,0x60
                 __CLEAR_SRAM:
000038 93ed      	ST   X+,R30
000039 9701      	SBIW R24,1
00003a f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00003b e3ec      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00003c e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
00003d 9185      	LPM  R24,Z+
00003e 9195      	LPM  R25,Z+
00003f 9700      	SBIW R24,0
000040 f061      	BREQ __GLOBAL_INI_END
000041 91a5      	LPM  R26,Z+
000042 91b5      	LPM  R27,Z+
000043 9005      	LPM  R0,Z+
000044 9015      	LPM  R1,Z+
000045 01bf      	MOVW R22,R30
000046 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000047 9005      	LPM  R0,Z+
000048 920d      	ST   X+,R0
000049 9701      	SBIW R24,1
00004a f7e1      	BRNE __GLOBAL_INI_LOOP
00004b 01fb      	MOVW R30,R22
00004c cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;STACK POINTER INITIALIZATION
00004d e5ef      	LDI  R30,LOW(0x25F)
00004e bfed      	OUT  SPL,R30
00004f e0e2      	LDI  R30,HIGH(0x25F)
000050 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000051 eec0      	LDI  R28,LOW(0xE0)
000052 e0d0      	LDI  R29,HIGH(0xE0)
                 
000053 c000      	RJMP _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0xE0
                 
                 	.CSEG
                 ;//***************************************************************************
                 ;//
                 ;//  Author(s)...: Pashgan    http://ChipEnable.Ru
                 ;//
                 ;//  Target(s)...: ATMega8535
                 ;//
                 ;//  Compiler....: CodeVision 2.04
                 ;//
                 ;//  Description.: USART/UART. Используем кольцевой буфер
                 ;//
                 ;//  Data........: 3.01.10
                 ;//
                 ;//***************************************************************************
                 ;#include <mega8535.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include "usart.h"
                 ;
                 ;void main( void )
                 ; 0000 0012 {
                 
                 	.CSEG
                 _main:
                 ; 0000 0013   unsigned char symbol;
                 ; 0000 0014   USART_Init();
                 ;	symbol -> R17
000054 d00c      	RCALL _USART_Init
                 ; 0000 0015   #asm("sei");
000055 9478      	sei
                 ; 0000 0016 
                 ; 0000 0017   while(1){
                 _0x3:
                 ; 0000 0018     symbol = USART_GetChar();   //взять символ из буфера
000056 d050      	RCALL _USART_GetChar
000057 2f1e      	MOV  R17,R30
                 ; 0000 0019     if (symbol == 't')          //если 't' - ответить
000058 3714      	CPI  R17,116
000059 f429      	BRNE _0x6
                 ; 0000 001A       USART_SendStr(" test - OK ");
                +
00005a eee0     +LDI R30 , LOW ( _0x7 + ( 0 ) )
00005b e0f0     +LDI R31 , HIGH ( _0x7 + ( 0 ) )
                 	__POINTW1MN _0x7,0
00005c 93fa      	ST   -Y,R31
00005d 93ea      	ST   -Y,R30
00005e d023      	RCALL _USART_SendStr
                 ; 0000 001B   }
                 _0x6:
00005f cff6      	RJMP _0x3
                 ; 0000 001C }
                 _0x8:
000060 cfff      	RJMP _0x8
                 
                 	.DSEG
                 _0x7:
0000e0           	.BYTE 0xC
                 ;//***************************************************************************
                 ;//
                 ;//  Author(s)...: Pashgan    http://ChipEnable.Ru
                 ;//
                 ;//  Target(s)...: ATMega8535
                 ;//
                 ;//  Compiler....: CodeVision 2.04
                 ;//
                 ;//  Description.: USART/UART. Используем кольцевой буфер
                 ;//
                 ;//  Data........: 3.01.10
                 ;//
                 ;//***************************************************************************
                 ;#include "usart.h"
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;
                 ;//передающий буфер
                 ;unsigned char usartTxBuf[SIZE_BUF];
                 ;unsigned char txBufTail = 0;
                 ;unsigned char txBufHead = 0;
                 ;unsigned char txCount = 0;
                 ;
                 ;//приемный буфер
                 ;unsigned char usartRxBuf[SIZE_BUF];
                 ;unsigned char rxBufTail = 0;
                 ;unsigned char rxBufHead = 0;
                 ;unsigned char rxCount = 0;
                 ;
                 ;//инициализация usart`a
                 ;void USART_Init(void)
                 ; 0001 001E {
                 
                 	.CSEG
                 _USART_Init:
                 ; 0001 001F   UBRRH = 0;
000061 e0e0      	LDI  R30,LOW(0)
000062 bde0      	OUT  0x20,R30
                 ; 0001 0020   UBRRL = 51; //скорость обмена 9600 бод
000063 e3e3      	LDI  R30,LOW(51)
000064 b9e9      	OUT  0x9,R30
                 ; 0001 0021   UCSRB = (1<<RXCIE)|(1<<TXCIE)|(1<<RXEN)|(1<<TXEN); //разр. прерыв при приеме и передачи, разр приема, разр передачи.
000065 ede8      	LDI  R30,LOW(216)
000066 b9ea      	OUT  0xA,R30
                 ; 0001 0022   UCSRC = (1<<URSEL)|(1<<UCSZ1)|(1<<UCSZ0); //размер слова 8 разрядов
000067 e8e6      	LDI  R30,LOW(134)
000068 bde0      	OUT  0x20,R30
                 ; 0001 0023 }
000069 9508      	RET
                 ;
                 ;//______________________________________________________________________________
                 ;//возвращает колличество символов передающего буфера
                 ;unsigned char USART_GetTxCount(void)
                 ; 0001 0028 {
                 ; 0001 0029   return txCount;
                 ; 0001 002A }
                 ;
                 ;//"очищает" передающий буфер
                 ;void USART_FlushTxBuf(void)
                 ; 0001 002E {
                 ; 0001 002F   txBufTail = 0;
                 ; 0001 0030   txCount = 0;
                 ; 0001 0031   txBufHead = 0;
                 ; 0001 0032 }
                 ;
                 ;//помещает символ в буфер, инициирует начало передачи
                 ;void USART_PutChar(unsigned char sym)
                 ; 0001 0036 {
                 _USART_PutChar:
                 ; 0001 0037   //если модуль usart свободен и это первый символ
                 ; 0001 0038   //пишем его прямо в регистр UDR
                 ; 0001 0039   if(((UCSRA & (1<<UDRE)) != 0) && (txCount == 0)) UDR = sym;
                 ;	sym -> Y+0
00006a 9b5d      	SBIS 0xB,5
00006b c003      	RJMP _0x20004
00006c e0e0      	LDI  R30,LOW(0)
00006d 15e7      	CP   R30,R7
00006e f009      	BREQ _0x20005
                 _0x20004:
00006f c003      	RJMP _0x20003
                 _0x20005:
000070 81e8      	LD   R30,Y
000071 b9ec      	OUT  0xC,R30
                 ; 0001 003A   else {
000072 c00d      	RJMP _0x20006
                 _0x20003:
                 ; 0001 003B     if (txCount < SIZE_BUF){    //если в буфере еще есть место
000073 e1e0      	LDI  R30,LOW(16)
000074 167e      	CP   R7,R30
000075 f450      	BRSH _0x20007
                 ; 0001 003C       usartTxBuf[txBufTail] = sym; //помещаем в него символ
000076 2de5      	MOV  R30,R5
000077 d05d      	RCALL SUBOPT_0x0
000078 81a8      	LD   R26,Y
000079 83a0      	STD  Z+0,R26
                 ; 0001 003D       txCount++;                   //инкрементируем счетчик символов
00007a 9473      	INC  R7
                 ; 0001 003E       txBufTail++;                 //и индекс хвоста буфера
00007b 9453      	INC  R5
                 ; 0001 003F       if (txBufTail == SIZE_BUF) txBufTail = 0;
00007c e1e0      	LDI  R30,LOW(16)
00007d 15e5      	CP   R30,R5
00007e f409      	BRNE _0x20008
00007f 2455      	CLR  R5
                 ; 0001 0040     }
                 _0x20008:
                 ; 0001 0041   }
                 _0x20007:
                 _0x20006:
                 ; 0001 0042 }
000080 9621      	ADIW R28,1
000081 9508      	RET
                 ;
                 ;//функция посылающая строку по usart`у
                 ;void USART_SendStr(unsigned char * data)
                 ; 0001 0046 {
                 _USART_SendStr:
                 ; 0001 0047   unsigned char sym;
                 ; 0001 0048   while(*data){
000082 931a      	ST   -Y,R17
                 ;	*data -> Y+1
                 ;	sym -> R17
                 _0x20009:
000083 81a9      	LDD  R26,Y+1
000084 81ba      	LDD  R27,Y+1+1
000085 91ec      	LD   R30,X
000086 30e0      	CPI  R30,0
000087 f031      	BREQ _0x2000B
                 ; 0001 0049     sym = *data++;
000088 911d      	LD   R17,X+
000089 83a9      	STD  Y+1,R26
00008a 83ba      	STD  Y+1+1,R27
                 ; 0001 004A     USART_PutChar(sym);
00008b 931a      	ST   -Y,R17
00008c dfdd      	RCALL _USART_PutChar
                 ; 0001 004B   }
00008d cff5      	RJMP _0x20009
                 _0x2000B:
                 ; 0001 004C }
00008e 8118      	LDD  R17,Y+0
00008f 9623      	ADIW R28,3
000090 9508      	RET
                 ;
                 ;//обработчик прерывания по завершению передачи
                 ;interrupt [USART_TXC] void usart_txc_my(void)
                 ; 0001 0050 {
                 _usart_txc_my:
000091 93ea      	ST   -Y,R30
000092 93fa      	ST   -Y,R31
000093 b7ef      	IN   R30,SREG
000094 93ea      	ST   -Y,R30
                 ; 0001 0051   if (txCount > 0){              //если буфер не пустой
000095 e0e0      	LDI  R30,LOW(0)
000096 15e7      	CP   R30,R7
000097 f450      	BRSH _0x2000C
                 ; 0001 0052     UDR = usartTxBuf[txBufHead]; //записываем в UDR символ из буфера
000098 2de4      	MOV  R30,R4
000099 d03b      	RCALL SUBOPT_0x0
00009a 81e0      	LD   R30,Z
00009b b9ec      	OUT  0xC,R30
                 ; 0001 0053     txCount--;                   //уменьшаем счетчик символов
00009c 947a      	DEC  R7
                 ; 0001 0054     txBufHead++;                 //инкрементируем индекс головы буфера
00009d 9443      	INC  R4
                 ; 0001 0055     if (txBufHead == SIZE_BUF) txBufHead = 0;
00009e e1e0      	LDI  R30,LOW(16)
00009f 15e4      	CP   R30,R4
0000a0 f409      	BRNE _0x2000D
0000a1 2444      	CLR  R4
                 ; 0001 0056   }
                 _0x2000D:
                 ; 0001 0057 }
                 _0x2000C:
0000a2 91e9      	LD   R30,Y+
0000a3 bfef      	OUT  SREG,R30
0000a4 91f9      	LD   R31,Y+
0000a5 91e9      	LD   R30,Y+
0000a6 9518      	RETI
                 ;
                 ;//______________________________________________________________________________
                 ;//возвращает колличество символов находящихся в приемном буфере
                 ;unsigned char USART_GetRxCount(void)
                 ; 0001 005C {
                 ; 0001 005D   return rxCount;
                 ; 0001 005E }
                 ;
                 ;//"очищает" приемный буфер
                 ;void USART_FlushRxBuf(void)
                 ; 0001 0062 {
                 ; 0001 0063   unsigned char saveSreg = SREG;
                 ; 0001 0064   #asm("cli");
                 ;	saveSreg -> R17
                 ; 0001 0065   rxBufTail = 0;
                 ; 0001 0066   rxBufHead = 0;
                 ; 0001 0067   rxCount = 0;
                 ; 0001 0068   SREG = saveSreg;
                 ; 0001 0069 }
                 ;
                 ;//чтение буфера
                 ;unsigned char USART_GetChar(void)
                 ; 0001 006D {
                 _USART_GetChar:
                 ; 0001 006E   unsigned char sym;
                 ; 0001 006F   if (rxCount > 0){                     //если приемный буфер не пустой
0000a7 931a      	ST   -Y,R17
                 ;	sym -> R17
0000a8 e0e0      	LDI  R30,LOW(0)
0000a9 15e8      	CP   R30,R8
0000aa f468      	BRSH _0x2000E
                 ; 0001 0070     sym = usartRxBuf[rxBufHead];        //прочитать из него символ
0000ab 2de9      	MOV  R30,R9
0000ac e0f0      	LDI  R31,0
0000ad 50e4      	SUBI R30,LOW(-_usartRxBuf)
0000ae 4fff      	SBCI R31,HIGH(-_usartRxBuf)
0000af 8110      	LD   R17,Z
                 ; 0001 0071     rxCount--;                          //уменьшить счетчик символов
0000b0 948a      	DEC  R8
                 ; 0001 0072     rxBufHead++;                        //инкрементировать индекс головы буфера
0000b1 9493      	INC  R9
                 ; 0001 0073     if (rxBufHead == SIZE_BUF) rxBufHead = 0;
0000b2 e1e0      	LDI  R30,LOW(16)
0000b3 15e9      	CP   R30,R9
0000b4 f409      	BRNE _0x2000F
0000b5 2499      	CLR  R9
                 ; 0001 0074     return sym;                         //вернуть прочитанный символ
                 _0x2000F:
0000b6 2fe1      	MOV  R30,R17
0000b7 c001      	RJMP _0x2000001
                 ; 0001 0075   }
                 ; 0001 0076   return 0;
                 _0x2000E:
0000b8 e0e0      	LDI  R30,LOW(0)
                 _0x2000001:
0000b9 9119      	LD   R17,Y+
0000ba 9508      	RET
                 ; 0001 0077 }
                 ;
                 ;
                 ;//прерывание по завершению приема
                 ;interrupt [USART_RXC] void usart_rxc_my(void)
                 ; 0001 007C {
                 _usart_rxc_my:
0000bb 93aa      	ST   -Y,R26
0000bc 93ba      	ST   -Y,R27
0000bd 93ea      	ST   -Y,R30
0000be b7ef      	IN   R30,SREG
0000bf 93ea      	ST   -Y,R30
                 ; 0001 007D   if (rxCount < SIZE_BUF){                //если в буфере еще есть место
0000c0 e1e0      	LDI  R30,LOW(16)
0000c1 168e      	CP   R8,R30
0000c2 f460      	BRSH _0x20010
                 ; 0001 007E       usartRxBuf[rxBufTail] = UDR;        //считать символ из UDR в буфер
0000c3 2da6      	MOV  R26,R6
0000c4 e0b0      	LDI  R27,0
0000c5 50a4      	SUBI R26,LOW(-_usartRxBuf)
0000c6 4fbf      	SBCI R27,HIGH(-_usartRxBuf)
0000c7 b1ec      	IN   R30,0xC
0000c8 93ec      	ST   X,R30
                 ; 0001 007F       rxBufTail++;                             //увеличить индекс хвоста приемного буфера
0000c9 9463      	INC  R6
                 ; 0001 0080       if (rxBufTail == SIZE_BUF) rxBufTail = 0;
0000ca e1e0      	LDI  R30,LOW(16)
0000cb 15e6      	CP   R30,R6
0000cc f409      	BRNE _0x20011
0000cd 2466      	CLR  R6
                 ; 0001 0081       rxCount++;                                 //увеличить счетчик принятых символов
                 _0x20011:
0000ce 9483      	INC  R8
                 ; 0001 0082     }
                 ; 0001 0083 }
                 _0x20010:
0000cf 91e9      	LD   R30,Y+
0000d0 bfef      	OUT  SREG,R30
0000d1 91e9      	LD   R30,Y+
0000d2 91b9      	LD   R27,Y+
0000d3 91a9      	LD   R26,Y+
0000d4 9518      	RETI
                 ;
                 
                 	.DSEG
                 _usartTxBuf:
0000ec           	.BYTE 0x10
                 _usartRxBuf:
0000fc           	.BYTE 0x10
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x0:
0000d5 e0f0      	LDI  R31,0
0000d6 51e4      	SUBI R30,LOW(-_usartTxBuf)
0000d7 4fff      	SBCI R31,HIGH(-_usartTxBuf)
0000d8 9508      	RET
                 
                 
                 	.CSEG
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega8535 register use summary:
r0 :   4 r1 :   1 r2 :   0 r3 :   0 r4 :   4 r5 :   4 r6 :   4 r7 :   5 
r8 :   4 r9 :   4 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:   0 r17:  10 r18:   0 r19:   0 r20:   0 r21:   0 r22:   2 r23:   0 
r24:   7 r25:   2 r26:  11 r27:   8 r28:   3 r29:   1 r30:  71 r31:  13 
x  :   6 y  :  27 z  :  10 
Registers used: 21 out of 35 (60.0%)

ATmega8535 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   0 add   :   0 
adiw  :   2 and   :   0 andi  :   0 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :   3 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 
brlt  :   0 brmi  :   0 brne  :   8 brpl  :   0 brsh  :   4 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 cbi   :   0 
cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 clr   :   6 
cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 cp    :   9 
cpc   :   0 cpi   :   2 cpse  :   0 dec   :   3 des   :   0 eor   :   0 
fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 in    :   3 
inc   :   6 ld    :  14 ldd   :   3 ldi   :  32 lds   :   0 lpm   :   7 
lsl   :   0 lsr   :   0 mov   :   6 movw  :   3 mul   :   0 muls  :   0 
mulsu :   0 neg   :   0 nop   :   0 or    :   0 ori   :   0 out   :  16 
pop   :   0 push  :   0 rcall :   6 ret   :   5 reti  :   2 rjmp  :  30 
rol   :   0 ror   :   0 sbc   :   0 sbci  :   3 sbi   :   0 sbic  :   0 
sbis  :   1 sbiw  :   3 sbr   :   0 sbrc  :   0 sbrs  :   0 sec   :   0 
seh   :   0 sei   :   1 sen   :   0 ser   :   0 ses   :   0 set   :   0 
sev   :   0 sez   :   0 sleep :   0 spm   :   0 st    :  16 std   :   3 
sts   :   0 sub   :   0 subi  :   3 swap  :   0 tst   :   0 wdr   :   0 

Instructions used: 29 out of 114 (25.4%)

ATmega8535 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0001b2    402     32    434    8192   5.3%
[.dseg] 0x000060 0x00010c      0     44     44     512   8.6%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 6 warnings
