/* LCD driver routines

  CodeVisionAVR C Compiler
  (C) 1998-2007 Pavel Haiduc, HP InfoTech S.R.L.

  Модификация: Samodelkin (Danil Pervakov)
  08 апреля 2008 года.
*/

// проверено на платформе: ATtiny2313 + WH1602C (Winstart)
// компиляция с оптимизацией по размеру

// стандартная библиотека
// EEPROM usage: 0 byte(s) (0,0% of EEPROM)
// Program size: 932 words (91,0% of FLASH)

// библиотека с перекодировщиком
// EEPROM usage: 0 byte(s) (0,0% of EEPROM)
// Program size: 978 words (95,5% of FLASH)

// т.е. код вырос на 48 слов (96 байт)

#asm
    .equ __lcd_direction=__lcd_port-1
    .equ __lcd_pin=__lcd_port-2
    .equ __lcd_rs=0
    .equ __lcd_rd=1
    .equ __lcd_enable=2
    .equ __lcd_busy_flag=7
#endasm

#pragma used+
static unsigned char _base_y[4]={0x80,0xc0};
unsigned char _lcd_x,_lcd_y,_lcd_maxx;

flash unsigned char recode[]={
65,  // А (192)
160, // Б
66,  // В
161, // Г
224, // Д
69,  // Е
163, // Ж
164, // З
165, // И
166, // Й
75,  // К
167, // Л
77,  // М
72,  // Н
79,  // О
168, // П
80,  // Р
67,  // С
84,  // Т
169, // У
170, // Ф
89,  // Х
225, // Ц
171, // Ч
172, // Ш
226, // Щ
173, // Ъ
174, // Ы
98,  // Ь
175, // Э
176, // Ю
177, // Я (223)
97,  // а (224)
178, // б
179, // в
180, // г
227, // д
101, // е
182, // ж
183, // з
184, // и
185, // й
186, // к
187, // л
188, // м
189, // н
111, // о
190, // п
112, // р
99,  // с
191, // т
121, // у
228, // ф
120, // х
229, // ц
192, // ч
193, // ш
230, // щ
194, // ъ
195, // ы
196, // ь
197, // э
198, // ю
199  // я (255)
};
#pragma used-

static void _lcd_delay(void)
{
#asm
    ldi   r31,15
__lcd_delay0:
    dec   r31
    brne  __lcd_delay0
#endasm
}

void _lcd_ready(void)
{
#asm
    in    r26,__lcd_direction
    andi  r26,0xf                 ;set as input
    out   __lcd_direction,r26
    sbi   __lcd_port,__lcd_rd     ;RD=1
    cbi   __lcd_port,__lcd_rs     ;RS=0
__lcd_busy:
#endasm
_lcd_delay();
#asm
    sbi   __lcd_port,__lcd_enable ;EN=1
#endasm
_lcd_delay();
#asm
    in    r26,__lcd_pin
    cbi   __lcd_port,__lcd_enable ;EN=0
#endasm
_lcd_delay();
#asm
    sbi   __lcd_port,__lcd_enable ;EN=1
#endasm
_lcd_delay();
#asm
    cbi   __lcd_port,__lcd_enable ;EN=0
    sbrc  r26,__lcd_busy_flag
    rjmp  __lcd_busy
#endasm
}

static void _lcd_write_nibble(void)
{
#asm
    andi  r26,0xf0
    or    r26,r27
    out   __lcd_port,r26          ;write
    sbi   __lcd_port,__lcd_enable ;EN=1
#endasm
_lcd_delay();
#asm
    cbi   __lcd_port,__lcd_enable ;EN=0
#endasm
_lcd_delay();
}

void _lcd_write_data(unsigned char data)
{
#asm
    cbi  __lcd_port,__lcd_rd 	  ;RD=0
    in    r26,__lcd_direction
    ori   r26,0xf0 | (1<<__lcd_rs) | (1<<__lcd_rd) | (1<<__lcd_enable) ;set as output    
    out   __lcd_direction,r26
    in    r27,__lcd_port
    andi  r27,0xf
    ld    r26,y
#endasm
    _lcd_write_nibble();           //RD=0, write MSN
#asm
    ld    r26,y
    swap  r26
#endasm
    _lcd_write_nibble();           //write LSN
#asm
    sbi   __lcd_port,__lcd_rd     ;RD=1
#endasm
}

/* write a byte to the LCD character generator or display RAM */
void lcd_write_byte(unsigned char addr, unsigned char data)
{
_lcd_ready();
_lcd_write_data(addr);
_lcd_ready();
#asm
    sbi   __lcd_port,__lcd_rs     ;RS=1
#endasm
_lcd_write_data(data);
}

static void _lcd_read_nibble(void)
{
#asm
    sbi   __lcd_port,__lcd_enable ;EN=1
#endasm
_lcd_delay();
#asm
    in    r30,__lcd_pin           ;read
    cbi   __lcd_port,__lcd_enable ;EN=0
#endasm
_lcd_delay();
#asm
    andi  r30,0xf0
#endasm
}

static unsigned char lcd_read_byte0(void)
{
_lcd_delay();
_lcd_read_nibble();           // read MSN
#asm
    mov   r26,r30
#endasm
_lcd_read_nibble();           // read LSN
#asm
    cbi   __lcd_port,__lcd_rd     ;RD=0
    swap  r30
    or    r30,r26
#endasm
}

/* read a byte from the LCD character generator or display RAM */
unsigned char lcd_read_byte(unsigned char addr)
{
_lcd_ready();
_lcd_write_data(addr);
_lcd_ready();
#asm
    in    r26,__lcd_direction
    andi  r26,0xf                 ;set as input
    out   __lcd_direction,r26
    sbi   __lcd_port,__lcd_rs     ;RS=1
#endasm
return lcd_read_byte0();
}

/* set the LCD display position x=0..39 y=0..3 */
void lcd_gotoxy(unsigned char x, unsigned char y)
{
_lcd_ready(); // RS=0
_lcd_write_data(_base_y[y]+x);
_lcd_x=x;
_lcd_y=y;
}

// включить курсор (немигающий)
void lcd_cursor_on(void)
{
_lcd_ready();         // RS=0
_lcd_write_data(0x0E); // cursor on
}

// включить курсор (мигающий)
void lcd_cursor_blink(void)
{
_lcd_ready();         // RS=0
_lcd_write_data(0x0D); // cursor blink
}

// выключить курсор
void lcd_cursor_off(void)
{
_lcd_ready();         // RS=0
_lcd_write_data(0x0C); // cursor off
}

// clear the LCD
void lcd_clear(void)
{
_lcd_ready();         // RS=0
_lcd_write_data(2);   // cursor home
_lcd_ready();
_lcd_write_data(0xc); // cursor off
_lcd_ready();
_lcd_write_data(1);   // clear
_lcd_x=_lcd_y=0;
}

// ранее называлась lcd_putchar
void putchar_lcd(char c)
{
#asm
    push r30
    push r31
    ld   r26,y
    set
    cpi  r26,10
    breq __lcd_putchar1
    clt
#endasm
++_lcd_x;
if (_lcd_x>_lcd_maxx)
   {
   #asm("__lcd_putchar1:")
   ++_lcd_y;
   lcd_gotoxy(0,_lcd_y);
   #asm("brts __lcd_putchar0")
   };
#asm
    rcall __lcd_ready
    sbi  __lcd_port,__lcd_rs ;RS=1
    ld   r26,y
    st   -y,r26
    rcall __lcd_write_data
__lcd_putchar0:
    pop  r31
    pop  r30
#endasm
}

void lcd_putchar(unsigned char ch)
{
if (ch >= 192) putchar_lcd(recode[ch-192]);
else putchar_lcd(ch);
}

// write the string str located in SRAM to the LCD
void lcd_puts(char *str)
{
char k;
while (k=*str++) lcd_putchar(k);
}

// write the string str located in FLASH to the LCD
void lcd_putsf(char flash *str)
{
char k;
while (k=*str++) lcd_putchar(k);
}

static void _long_delay(void)
{
#asm
    clr   r26
    clr   r27
__long_delay0:
    sbiw  r26,1         ;2 cycles
    brne  __long_delay0 ;2 cycles
#endasm
}

static void _lcd_init_write(unsigned char data)
{
#asm
    cbi  __lcd_port,__lcd_rd 	  ;RD=0
    in    r26,__lcd_direction
    ori   r26,0xf7                ;set as output
    out   __lcd_direction,r26
    in    r27,__lcd_port
    andi  r27,0xf
    ld    r26,y
#endasm
    _lcd_write_nibble();           //RD=0, write MSN
#asm
    sbi   __lcd_port,__lcd_rd     ;RD=1
#endasm
}

// initialize the LCD controller
unsigned char lcd_init(unsigned char lcd_columns)
{
#asm
    cbi   __lcd_port,__lcd_enable ;EN=0
    cbi   __lcd_port,__lcd_rs     ;RS=0
#endasm
_lcd_maxx=lcd_columns;
_base_y[2]=lcd_columns+0x80;
_base_y[3]=lcd_columns+0xc0;
_long_delay();
_lcd_init_write(0x30);
_long_delay();
_lcd_init_write(0x30);
_long_delay();
_lcd_init_write(0x30);
_long_delay();
_lcd_init_write(0x20);
_long_delay();
_lcd_write_data(0x28);
_long_delay();
_lcd_write_data(4);
_long_delay();
_lcd_write_data(0x85);
_long_delay();
#asm
    in    r26,__lcd_direction
    andi  r26,0xf                 ;set as input
    out   __lcd_direction,r26
    sbi   __lcd_port,__lcd_rd     ;RD=1
#endasm
if (lcd_read_byte0()!=5) return 0;
_lcd_ready();
_lcd_write_data(6);
lcd_clear();
return 1;
}
