;/*****************************************************
;Chip type           : ATmega8
;Program type        : Application
;Clock frequency     : 8,0000 MHz
;Memory model        : Small
;External SRAM size  : 0
;Data Stack size     : 256
;*****************************************************/
;
;#include <mega8.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <stdio.h>
;#include <delay.h>
;
;#define ADC_VREF_TYPE 0x00
;unsigned int adc_data = 0, T_now=0;
;
;static void avr_init();
;
;//unsigned int read_adc(unsigned char adc_input);
;
;int i=100;
;
;static void avr_init() {
; 0000 0017 static void avr_init() {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0018 // Input/Output Ports initialization
; 0000 0019 // Port B initialization
; 0000 001A // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=Out Func0=Out
; 0000 001B // State7=T State6=T State5=P State4=P State3=P State2=P State1=0 State0=0
; 0000 001C     PORTB=0x3C;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0000 001D     DDRB=0x03;
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 001E 
; 0000 001F // Port C initialization
; 0000 0020 // Func6=In Func5=Out Func4=Out Func3=In Func2=In Func1=In Func0=In
; 0000 0021 // State6=T State5=0 State4=1 State3=P State2=P State1=P State0=T
; 0000 0022     PORTC=0x1E;
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0000 0023     DDRC=0x30;
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0000 0024 
; 0000 0025 // Port D initialization
; 0000 0026 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 0027 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 0028     PORTD=0x00;
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
; 0000 0029     DDRD=0x00;
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0000 002A 
; 0000 002B // USART initialization
; 0000 002C // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 002D // USART Receiver: On
; 0000 002E // USART Transmitter: On
; 0000 002F // USART Mode: Asynchronous
; 0000 0030 // USART Baud Rate: 38400
; 0000 0031     UCSRA=0x00;
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0000 0032     UCSRB=0x18;
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0000 0033     UCSRC=0x86;
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 0034     UBRRH=0x00;
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0000 0035     UBRRL=0x0C;
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
; 0000 0036 
; 0000 0037 // Analog Comparator initialization
; 0000 0038 // Analog Comparator: Off
; 0000 0039 // Analog Comparator Input Capture by Timer/Counter 1: Off
; 0000 003A     ACSR=0x80;
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0000 003B     SFIOR=0x00;
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0000 003C 
; 0000 003D // ADC initialization
; 0000 003E // ADC Clock frequency: 115,200 kHz
; 0000 003F // ADC Voltage Reference: AREF pin
; 0000 0040     ADMUX=ADC_VREF_TYPE;
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
; 0000 0041     ADCSRA=0x8E;
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0000 0042 
; 0000 0043 // Global enable interrupts
; 0000 0044     #asm("sei")
;PCODE: $0000002D VOL: 0
	sei
;PCODE: $0000002E VOL: 0
; 0000 0045 }
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;
;// ADC interrupt service routine
;interrupt [ADC_INT] void adc_isr(void)
; 0000 0049 {
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
; 0000 004A // Read the AD conversion result
; 0000 004B     adc_data=ADCW;
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
; 0000 004C }
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;
;// Read the AD conversion result
;// with noise canceling
;unsigned int read_adc(unsigned char adc_input)
; 0000 0051 {
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
; 0000 0052 ADMUX=adc_input|ADC_VREF_TYPE;
;	adc_input -> Y+0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0000 0053 #asm
;PCODE: $0000003D VOL: 0
; 0000 0054     in   r30,mcucr
    in   r30,mcucr
;PCODE: $0000003E VOL: 0
; 0000 0055     cbr  r30,__sm_mask
    cbr  r30,__sm_mask
;PCODE: $0000003F VOL: 0
; 0000 0056     sbr  r30,__se_bit | __sm_adc_noise_red
    sbr  r30,__se_bit | __sm_adc_noise_red
;PCODE: $00000040 VOL: 0
; 0000 0057     out  mcucr,r30
    out  mcucr,r30
;PCODE: $00000041 VOL: 0
; 0000 0058     sleep
    sleep
;PCODE: $00000042 VOL: 0
; 0000 0059     cbr  r30,__se_bit
    cbr  r30,__se_bit
;PCODE: $00000043 VOL: 0
; 0000 005A     out  mcucr,r30
    out  mcucr,r30
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0000 005B #endasm
; 0000 005C return adc_data;
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; 0000 005D }
;PCODE: $00000049 VOL: 0
;
;
;
;void main(void)
; 0000 0062 {
;PCODE: $0000004A VOL: 0
; 0000 0063     avr_init();
;PCODE: $0000004B VOL: 0
; 0000 0064 
; 0000 0065     while (1)
;PCODE: $0000004C VOL: 0
; 0000 0066     {
; 0000 0067         delay_ms(100);
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
; 0000 0068         adc_data=read_adc(0);
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
; 0000 0069 
; 0000 006A         T_now = (1000 - adc_data) / 2;
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
; 0000 006B 
; 0000 006C         printf("%i", T_now);
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
; 0000 006D         printf("#");
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
; 0000 006E         i++;
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
; 0000 006F 
; 0000 0070     };
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
; 0000 0071 }
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;
;
;
