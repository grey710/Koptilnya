;/*****************************************************
;CodeWizardAVR V2.05.0 Professional
;Project : Koptilnya
;Version : 1
;Date    : 14.07.2011
;
;Chip type               : ATmega8535
;AVR Core Clock frequency: 7,813000 MHz
;*****************************************************/
;// Standard Input/Output functions
;#include <mega8535.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <stdio.h>
;#include <delay.h>
;
;// Alphanumeric LCD Module functions
;//Инициализация экрана
;#asm
;PCODE: $0000000D VOL: 0
  .equ __lcd_port=0x18 ;PORTB
;PCODE: $0000000E VOL: 0
;PCODE: $0000000F VOL: 0
; 0000 0013 #endasm
;#include <lcd.h>
;
;//=================================
;#ifndef RXB8
;#define RXB8 1
;#endif
;
;#ifndef TXB8
;#define TXB8 0
;#endif
;
;#ifndef UPE
;#define UPE 2
;#endif
;
;#ifndef DOR
;#define DOR 3
;#endif
;
;#ifndef FE
;#define FE 4
;#endif
;
;#ifndef UDRE
;#define UDRE 5
;#endif
;
;#ifndef RXC
;#define RXC 7
;#endif
;
;#define FRAMING_ERROR       (1<<FE)
;#define PARITY_ERROR        (1<<UPE)
;#define DATA_OVERRUN        (1<<DOR)
;#define DATA_REGISTER_EMPTY (1<<UDRE)
;#define RX_COMPLETE         (1<<RXC)
;
;#define _DEBUG_TERMINAL_IO_
;
;// USART Receiver buffer
;#define RX_BUFFER_SIZE 8
;char rx_buffer[RX_BUFFER_SIZE];
;
;unsigned char rx_wr_index,rx_rd_index,rx_counter;
;
;// This flag is set on USART Receiver buffer overflow
;bit rx_buffer_overflow;
;
;//===================================================================
;// USART Receiver interrupt service routine
;interrupt [USART_RXC] void usart_rx_isr(void)
; 0000 0047 {

	.CSEG
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0000 0048 char status,data;
; 0000 0049 
; 0000 004A #asm("cli")
;PCODE: $00000012 VOL: 0
;	status -> R17
;	data -> R16
;PCODE: $00000013 VOL: 0
	cli
;PCODE: $00000014 VOL: 0
; 0000 004B 
; 0000 004C status=UCSRA;
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0000 004D data=UDR;
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
; 0000 004E if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0000 004F     {
; 0000 0050         rx_buffer[rx_wr_index++]=data;
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 0051 
; 0000 0052         if (rx_wr_index == RX_BUFFER_SIZE) rx_wr_index=0;
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
; 0000 0053         if (++rx_counter == RX_BUFFER_SIZE)
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0000 0054         {
; 0000 0055             rx_counter=0;
;PCODE: $0000002A VOL: 0
; 0000 0056             rx_buffer_overflow=1;
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
; 0000 0057         }
; 0000 0058     }
;PCODE: $0000002E VOL: 0
; 0000 0059 #asm("sei")
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
	sei
;PCODE: $00000031 VOL: 0
; 0000 005A }
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;
;#ifndef _DEBUG_TERMINAL_IO_
;// Get a character from the USART Receiver buffer
;#define _ALTERNATE_GETCHAR_
;
;#pragma used+
;
;char getchar(void)
;{
;    char data;
;    while (rx_counter==0);
;    data=rx_buffer[rx_rd_index++];
;
;    #asm("cli")
;    --rx_counter;
;    #asm("sei")
;    return data;
;}
;
;#pragma used-
;#endif
;
;//порты обозначения кнопок
;#define kn_vverh            PINC.0
;#define kn_vniz             PINC.1
;#define kn_vpravo           PINC.2
;#define kn_vlevo            PINC.3
;#define kn_ENTER            PINC.4
;#define kn_ESC              PINC.5
;//==========================================================================
;// Глобальные переменные
;//volatile unsigned char t_max_razogrev     = 115;    // максимальная температура разогрева, в градусах Цельсия
;//volatile unsigned char t_max_rabochee     = 75;     // максимальная температура работы, в градусах Цельсия
;//volatile unsigned char t_min_razogrev     = 105;    // минимальная  температура разогрева, в градусах Цельсия
;//volatile unsigned char t_min_rabochee     = 65;     // минимальная температура работы, в градусах Цельсия
;
;volatile unsigned char real_temp;                   // текущая температура
;
;//volatile unsigned char time_rabota_ch     = 4;      // время работы, измеряется в часах
;//volatile unsigned char time_rabota_min    = 30;     // время работы, измеряется в минутах
;//volatile unsigned char time_smoke_ch      = 0;      // время работы вытяжки, задается в часах
;//volatile unsigned char time_smoke_min     = 10;     // время работы вытяжки, задается в минутах
;
;volatile unsigned char real_time_ch       = 0;      // текущее время работы в часах
;volatile unsigned char real_time_min      = 0;      // текущее время работы в минутах
;volatile unsigned char real_time_sek      = 0;      // текущее время работы в минутах
;
;\\volatile unsigned char regim_rabot        = 1;      // состояние режим работы
;\\volatile unsigned char regim_rabot_work   = 1;      // предыдущее состояние режима работы
;
;//unsigned char time_migat                = 100;    // время мигания при выборе значения, задается в мс.
;//unsigned char zadergka_pri_nagatii        = 100;    // задержка при нажатии кнопки
;//unsigned char zadergka_zastavka           = 200;    // время показа заставки
;
;volatile char lcd_str_1[16];
;volatile char lcd_str_2[16];
;
;//=============================================================================
;// Объявление без задания функций. (для обеспечения компиляции)
;\\void video(void);
;
;\\unsigned char read_temp();
;
;//=============================================================================
;// прерывание ежесекундного (или 0,2 секундного таймера)
;interrupt [TIM1_COMPA] void timer1_compa_isr(void)
; 0000 009D {
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0000 009E     #asm("cli")
;PCODE: $00000038 VOL: 0
	cli
;PCODE: $00000039 VOL: 0
; 0000 009F 
; 0000 00A0     TCNT1H=0;
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0000 00A1     TCNT1L=0;
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0000 00A2 
; 0000 00A3     real_time_sek++;
;PCODE: $0000003E VOL: 1
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 1
; 0000 00A4   	if (real_time_sek == 60) real_time_min++,	real_time_sek =0 ;
;PCODE: $00000041 VOL: 1
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 1
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 1
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 1
; 0000 00A5 	if (real_time_min == 60) real_time_ch++,	real_time_min =0 ;
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 1
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 1
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 1
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 1
; 0000 00A6 	if (real_time_ch  == 24) real_time_ch=0;
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 1
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 1
; 0000 00A7 
; 0000 00A8     #asm("sei")
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
	sei
;PCODE: $0000005A VOL: 0
; 0000 00A9 }
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;
;//=================================================
;/*
;unsigned char read_temp()
;{
;    unsigned char n,t;
;
;    for (n=0; n<5 ; n++)
;    {
;        if (getchar()=='#')
;        {
;
;            t=0;
;
;            t = getchar()*100;
;            t = real_temp + getchar()*10;
;            t = real_temp + getchar();
;
;            return t;
;
;        };
;    };
;    return 0;
;}
;*/
;
;void main(void)
; 0000 00C5 {
;PCODE: $0000005E VOL: 0
; 0000 00C6 //=================================================
; 0000 00C7 // Input/Output Ports initialization
; 0000 00C8 // Port A initialization
; 0000 00C9     PORTA=0x00;
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0000 00CA     DDRA=0xFF;
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
; 0000 00CB // Port B initialization
; 0000 00CC     PORTB=0x00;
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
; 0000 00CD     DDRB=0x00;
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0000 00CE // Инициализация порта клавиатуры.
; 0000 00CF // Port C initialization
; 0000 00D0     PORTC=0xFF;         // вкл. подтягивающие резисторы
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
; 0000 00D1     DDRC=0x00;          // весь порт как вход
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
; 0000 00D2 
; 0000 00D3 // Timer/Counter 1 initialization
; 0000 00D4 // Clock source: System Clock
; 0000 00D5 // Clock value: 7,813 kHz
; 0000 00D6 // Mode: Normal top=FFFFh
; 0000 00D7 // OC1A output: Discon.
; 0000 00D8 // OC1B output: Discon.
; 0000 00D9 // Noise Canceler: Off
; 0000 00DA // Input Capture on Falling Edge
; 0000 00DB // Timer 1 Overflow Interrupt: Off
; 0000 00DC // Input Capture Interrupt: Off
; 0000 00DD // Compare A Match Interrupt: On
; 0000 00DE // Compare B Match Interrupt: Off
; 0000 00DF     TCCR1A=0x00;
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
; 0000 00E0     TCCR1B=0x05;
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
; 0000 00E1     TCNT1H=0x00;
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
; 0000 00E2     TCNT1L=0x00;
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
; 0000 00E3     ICR1H=0x00;
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
; 0000 00E4     ICR1L=0x00;
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
; 0000 00E5     OCR1AH=0x1E;
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
; 0000 00E6     OCR1AL=0x85;
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
; 0000 00E7     OCR1BH=0x00;
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
; 0000 00E8     OCR1BL=0x00;
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
; 0000 00E9 
; 0000 00EA // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 00EB     TIMSK=0x10;
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
; 0000 00EC 
; 0000 00ED //=================================================
; 0000 00EE // USART initialization
; 0000 00EF // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 00F0 // USART Receiver: On
; 0000 00F1 // USART Transmitter: On
; 0000 00F2 // USART Mode: Asynchronous
; 0000 00F3 // USART Baud Rate: 38400
; 0000 00F4     UCSRA=0x00;
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
; 0000 00F5     UCSRB=0x18;
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
; 0000 00F6     UCSRC=0x86;
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
; 0000 00F7     UBRRH=0x00;
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
; 0000 00F8     UBRRL=0x0C;
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
; 0000 00F9 
; 0000 00FA //=================================================
; 0000 00FB // LCD module initialization
; 0000 00FC     lcd_init(16);
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
; 0000 00FD 
; 0000 00FE //=================================================
; 0000 00FF 
; 0000 0100 // Разрешение прерываний
; 0000 0101     #asm("sei")
;PCODE: $0000008E VOL: 0
	sei
;PCODE: $0000008F VOL: 0
; 0000 0102 // Вечный цикл
; 0000 0103     while(1)
;PCODE: $00000090 VOL: 0
; 0000 0104     {
; 0000 0105 
; 0000 0106         //read_temp();
; 0000 0107 //        if (getchar()=='#') real_temp = getchar()*100;
; 0000 0108 
; 0000 0109 //        real_temp = real_temp + getchar()*10;
; 0000 010A         real_temp = getchar();
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 1
; 0000 010B 
; 0000 010C         real_temp++;
;PCODE: $00000093 VOL: 1
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 1
; 0000 010D 
; 0000 010E         delay_ms(5);
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
; 0000 010F 
; 0000 0110 //===============================================================
; 0000 0111         sprintf(lcd_str_1,"RAZOGREV");
;PCODE: $00000099 VOL: 1
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
; 0000 0112 
; 0000 0113             sprintf(lcd_str_2,"%c%c:%c%c:%c%c T=%c%c%c C",
; 0000 0114             (real_time_ch/10)%10	+0x30,
; 0000 0115             real_time_ch%10		    +0x30,
; 0000 0116             (real_time_min/10)%10	+0x30,
; 0000 0117             real_time_min%10		+0x30,
; 0000 0118             (real_time_sek/10)%10	+0x30,
; 0000 0119             real_time_sek%10		+0x30,
; 0000 011A 
; 0000 011B             (real_temp/100)%10	    +0x30,
; 0000 011C             (real_temp/10)%10	    +0x30,
; 0000 011D             real_temp%10	    +0x30
; 0000 011E //            getchar()		    +0x30
; 0000 011F             );
;PCODE: $000000A2 VOL: 1
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 1
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 1
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 1
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 1
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 1
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 1
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 1
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 1
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 1
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
; 0000 0120 
; 0000 0121 
; 0000 0122 //========================================================
; 0000 0123     lcd_clear();          	// очистка ЛСД
;PCODE: $000000F9 VOL: 0
; 0000 0124 
; 0000 0125     lcd_gotoxy(0,0);      	// установка курсора на 0,0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
; 0000 0126     lcd_puts(lcd_str_1);
;PCODE: $000000FF VOL: 1
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
; 0000 0127 
; 0000 0128     lcd_gotoxy(0,1);      	// установка курсора на начало второй строки
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
; 0000 0129     lcd_puts(lcd_str_2);
;PCODE: $00000107 VOL: 1
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
; 0000 012A 
; 0000 012B     delay_ms(5);
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
; 0000 012C 
; 0000 012D     }
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
; 0000 012E }
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;
